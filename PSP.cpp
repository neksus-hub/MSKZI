#include <iostream>
#include <stdio.h>
#include <fstream>
using namespace std;

int main()
{
    int short rlz1 = 33678; //Начальное состояние первой рекурентной линии задержки
    int short bit_gamma = 0; //Символ выходной последовательности в определенном такте
    int short buffer = 0; // Переменная для переноса числа в другую ячейку массива
    long long int rlz2[2] = { 13523564,54266343421 }; //Начальное состоянии второй рекурентной линии задержки
    long long int gamma = 0; //Выходная последовательность
    for (int i = 0; i < 64; i++) {
        gamma = gamma << 1; //Сдвиг выходной последовательности на 1 бит
        bit_gamma = ((((rlz1 >> 13) ^ (rlz1 >> 12)) & 0x1) ^ (((rlz2[0] >> 39) ^ (rlz2[0] >> 32)) & 0x1)); //Формирование символа выходной последовательности в определенном такте
        gamma = gamma + bit_gamma; //Прибавление символа выходной последовательности
        rlz1 = rlz1 << 1; //Сдвиг РЛЗ1 на 1 бит влево
        rlz1 = rlz1 + (((rlz1 >> 13) ^ (rlz1 >> 12)) & 0x1); // Запись бита обратной связи в РЛЗ1
        buffer = (rlz2[1] >> 63) & 0x1; // Запись в буффер первого символа второй части РЛЗ2
        rlz2[0] = rlz2[0] << 1; //Сдвиг первой части РЛЗ2 на 1 бит
        rlz2[1] = rlz2[1] << 1; //Сдвиг второй части РЛЗ2 на 1 бит
        rlz2[0] = rlz2[0] + buffer; // Запись первго символа второй части РЛЗ2 в конец первой части РЛЗ1
        rlz2[1] = rlz2[1] + (((rlz2[0] >> 39) ^ (rlz2[0] >> 32)) & 0x1); //Запись бита обратной связи в РЛЗ2
    }

    cout << hex << gamma;
    return 0;

}